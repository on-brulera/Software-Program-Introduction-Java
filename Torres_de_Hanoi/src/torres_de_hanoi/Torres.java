/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package torres_de_hanoi;

/**
 *
 * @author ALEXIS
 */
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

public class Torres extends javax.swing.JFrame {

    /**
     * Creates new form Torres
     */
    int ContNumMov = 0;
    Pila PilaTorreA;
    Pila PilaTorreB;
    Pila PilaTorreC;

    DefaultTableModel ModeloTablaA, ModeloTablaB, ModeloTablaC;

    int Objetivo = 0;

    double NumMinMov = 0;

    boolean Stop = false;

    public Torres() {
        initComponents();

        ModeloTablaA = (DefaultTableModel) TorreA.getModel();
        ModeloTablaA.setRowCount(10);

        ModeloTablaB = (DefaultTableModel) TorreB.getModel();
        ModeloTablaB.setRowCount(10);

        ModeloTablaC = (DefaultTableModel) TorreC.getModel();
        ModeloTablaC.setRowCount(10);

        DefaultTableCellRenderer renderA = new DefaultTableCellRenderer();
        renderA.setHorizontalAlignment(SwingConstants.CENTER);
        TorreA.getColumnModel().getColumn(0).setCellRenderer(renderA);
        
        DefaultTableCellRenderer renderB = new DefaultTableCellRenderer();
        renderB.setHorizontalAlignment(SwingConstants.CENTER);
        TorreB.getColumnModel().getColumn(0).setCellRenderer(renderB);

        DefaultTableCellRenderer renderC = new DefaultTableCellRenderer();
        renderC.setHorizontalAlignment(SwingConstants.CENTER);
        TorreC.getColumnModel().getColumn(0).setCellRenderer(renderC);
    }

    private void Limpiar() {

        ContNumMov = 0;
        NumMinMov = 0;

        CbNumerosDiscos.setSelectedItem(String.valueOf(Objetivo));

    }

    private void PresentarCantMov() {

        ContNumMov++;

        lblNumeroMovimientos.setText(String.valueOf(ContNumMov));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TorreC = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        TorreA = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        TorreB = new javax.swing.JTable();
        BtnA_B = new javax.swing.JButton();
        BtnA_C = new javax.swing.JButton();
        BtnC_B = new javax.swing.JButton();
        BtnC_A = new javax.swing.JButton();
        BtnB_A = new javax.swing.JButton();
        BtnB_C = new javax.swing.JButton();
        CbNumerosDiscos = new javax.swing.JComboBox<>();
        lblMinimoMovimientos = new javax.swing.JLabel();
        lblNumeroMovimientos = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        BtnIniciar = new javax.swing.JButton();
        BtnReiniciar = new javax.swing.JButton();
        BtnResolver = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TorreC.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Torre C"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TorreC.setAutoscrolls(false);
        TorreC.setFocusable(false);
        TorreC.setRowSelectionAllowed(false);
        TorreC.setShowHorizontalLines(false);
        TorreC.setShowVerticalLines(false);
        jScrollPane1.setViewportView(TorreC);
        if (TorreC.getColumnModel().getColumnCount() > 0) {
            TorreC.getColumnModel().getColumn(0).setResizable(false);
        }

        TorreA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Torre A"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TorreA.setAutoscrolls(false);
        TorreA.setFocusable(false);
        TorreA.setRowSelectionAllowed(false);
        TorreA.setShowHorizontalLines(false);
        TorreA.setShowVerticalLines(false);
        jScrollPane2.setViewportView(TorreA);
        if (TorreA.getColumnModel().getColumnCount() > 0) {
            TorreA.getColumnModel().getColumn(0).setResizable(false);
        }

        TorreB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Torre B"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TorreB.setAutoscrolls(false);
        TorreB.setFocusable(false);
        TorreB.setRowSelectionAllowed(false);
        TorreB.setShowHorizontalLines(false);
        TorreB.setShowVerticalLines(false);
        jScrollPane3.setViewportView(TorreB);
        if (TorreB.getColumnModel().getColumnCount() > 0) {
            TorreB.getColumnModel().getColumn(0).setResizable(false);
        }

        BtnA_B.setText("B");
        BtnA_B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnA_BActionPerformed(evt);
            }
        });

        BtnA_C.setText("C");
        BtnA_C.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnA_CActionPerformed(evt);
            }
        });

        BtnC_B.setText("B");
        BtnC_B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnC_BActionPerformed(evt);
            }
        });

        BtnC_A.setText("A");
        BtnC_A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnC_AActionPerformed(evt);
            }
        });

        BtnB_A.setText("A");
        BtnB_A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnB_AActionPerformed(evt);
            }
        });

        BtnB_C.setText("C");
        BtnB_C.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnB_CActionPerformed(evt);
            }
        });

        CbNumerosDiscos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "3", "4", "5", "6", "7", "8", "9", "10" }));
        CbNumerosDiscos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CbNumerosDiscosActionPerformed(evt);
            }
        });

        lblMinimoMovimientos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMinimoMovimientos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblNumeroMovimientos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNumeroMovimientos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Numero de Discos");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Numero de Movimientos");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Numero minimo de Movimientos");

        BtnIniciar.setText("Iniciar");
        BtnIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnIniciarActionPerformed(evt);
            }
        });

        BtnReiniciar.setText("Reiniciar");
        BtnReiniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnReiniciarActionPerformed(evt);
            }
        });

        BtnResolver.setText("Resolver");
        BtnResolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnResolverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(79, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(BtnA_B, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(BtnA_C, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(BtnIniciar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(CbNumerosDiscos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblMinimoMovimientos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblNumeroMovimientos, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(BtnB_A, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(BtnB_C, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(41, 41, 41)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(BtnC_A, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(BtnC_B, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(BtnReiniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BtnResolver, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(80, 80, 80))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(72, 72, 72)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnA_B)
                    .addComponent(BtnA_C)
                    .addComponent(BtnB_A)
                    .addComponent(BtnB_C)
                    .addComponent(BtnC_A)
                    .addComponent(BtnC_B))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CbNumerosDiscos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMinimoMovimientos, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNumeroMovimientos, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnIniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnReiniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnResolver, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CbNumerosDiscosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CbNumerosDiscosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CbNumerosDiscosActionPerformed

    private void MoverA_B() {
        try {
            if (PilaTorreA.getContNodo() > 0) {

                Nodo Plataforma = new Nodo();

                Plataforma.setDato(PilaTorreA.Peek());

                if (PilaTorreB.getContNodo() > 0) {

                    if (Plataforma.getDato().compareTo(PilaTorreB.Peek()) > 0) {

                        return;
                    }
                }

                PilaTorreA.POP();
                PilaTorreB.Push(Plataforma);

                PresentarTorreA();
                PresentarTorreB();
                PresentarCantMov();

            }
        } catch (Exception e) {
        }
    }
    private void BtnA_BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnA_BActionPerformed
        MoverA_B();
    }//GEN-LAST:event_BtnA_BActionPerformed

    private void Reiniciar() {
        try {

            if (!lblMinimoMovimientos.getText().equals(" ")) {

                Limpiar();
                Iniciar();
            }

        } catch (Exception e) {
        }
    }

    private void Iniciar() {

        try {
            PilaTorreA = new Pila();
            PilaTorreB = new Pila();
            PilaTorreC = new Pila();

            Objetivo = Integer.parseInt(CbNumerosDiscos.getSelectedItem().toString());

            NumMinMov = Math.pow(2, Objetivo) - 1;
            
            ContNumMov = 0;
            lblNumeroMovimientos.setText(String.valueOf(ContNumMov));
            lblMinimoMovimientos.setText(String.valueOf(String.format("%.0f", NumMinMov)));

            for (int x = Objetivo; x >= 1; x--) {

                Nodo Plataforma = new Nodo();

                String Disco = "";

                for (int y = x; y > 0; y--) {

                    Disco += "#";
                }

                Plataforma.setDato(Disco);

                PilaTorreA.Push(Plataforma);

                PresentarTorreA();
                PresentarTorreB();
                PresentarTorreC();
            }
        } catch (Exception E) {
            System.out.println("Error: "+E.getMessage());
        }

    }

    private void PresentarTorreA() {

        ((DefaultTableModel) TorreA.getModel()).setRowCount(0);

        ModeloTablaA.setRowCount(10);

        Nodo K;

        int RowDisco = (10 - PilaTorreA.getContNodo());

        if (PilaTorreA.getContNodo() > 0) {

            for (K = PilaTorreA.getCabeza(); K.getAbajo() != null; K = K.getAbajo()) {

                String[] VectorNormal = {K.getDato()};

                ModeloTablaA.insertRow(RowDisco, VectorNormal);
                RowDisco++;
            }
            if (K.getAbajo() == null) {
                String[] VectorNormal = {K.getDato()};

                ModeloTablaA.insertRow(RowDisco, VectorNormal);
            }
        }

        TorreA.setModel(ModeloTablaA);
        ModeloTablaA.setRowCount(10);
    }

    private void PresentarTorreB() {

        ((DefaultTableModel) TorreB.getModel()).setRowCount(0);

        ModeloTablaB.setRowCount(10);

        Nodo K;

        int RowDisco = (10 - PilaTorreB.getContNodo());

        if (PilaTorreB.getContNodo() > 0) {

            for (K = PilaTorreB.getCabeza(); K.getAbajo() != null; K = K.getAbajo()) {

                String[] VectorNormal = {K.getDato()};

                ModeloTablaB.insertRow(RowDisco, VectorNormal);
                RowDisco++;
            }
            if (K.getAbajo() == null) {
                String[] VectorNormal = {K.getDato()};

                ModeloTablaB.insertRow(RowDisco, VectorNormal);
            }
        }

        TorreB.setModel(ModeloTablaB);
        ModeloTablaB.setRowCount(10);

    }

    private void PresentarTorreC() {

        ((DefaultTableModel) TorreC.getModel()).setRowCount(0);

        ModeloTablaC.setRowCount(10);

        Nodo K;

        int RowDisco = (10 - PilaTorreC.getContNodo());

        if (PilaTorreC.getContNodo() > 0) {

            for (K = PilaTorreC.getCabeza(); K.getAbajo() != null; K = K.getAbajo()) {

                String[] VectorNormal = {K.getDato()};

                ModeloTablaC.insertRow(RowDisco, VectorNormal);
                RowDisco++;
            }
            if (K.getAbajo() == null) {
                String[] VectorNormal = {K.getDato()};

                ModeloTablaC.insertRow(RowDisco, VectorNormal);
            }
        }

        TorreC.setModel(ModeloTablaC);
        ModeloTablaC.setRowCount(10);
    }

    private void BtnIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnIniciarActionPerformed
        // TODO add your handling code here:

        Iniciar();

    }//GEN-LAST:event_BtnIniciarActionPerformed

    private void BtnReiniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnReiniciarActionPerformed
        // TODO add your handling code here:

        Reiniciar();
    }//GEN-LAST:event_BtnReiniciarActionPerformed

    private void MoverDeA_C() {
        try {
            if (PilaTorreA.getContNodo() > 0) {

                Nodo Plataforma = new Nodo();

                Plataforma.setDato(PilaTorreA.Peek());

                if (PilaTorreC.getContNodo() > 0) {

                    if (Plataforma.getDato().compareTo(PilaTorreC.Peek()) > 0) {

                        return;
                    }
                }

                PilaTorreA.POP();
                PilaTorreC.Push(Plataforma);

                PresentarTorreA();
                PresentarTorreC();
                PresentarCantMov();

                if (PilaTorreC.getContNodo() == Objetivo && ContNumMov == NumMinMov) {
                    JOptionPane.showMessageDialog(null, "Felicidades has echo el minimo de movimientos\n\nIntenta con otro nivel de dificultad", "Felicitaciones", JOptionPane.WARNING_MESSAGE);
                } else if (PilaTorreC.getContNodo() == Objetivo && ContNumMov != NumMinMov) {
                    JOptionPane.showMessageDialog(null, "Felicidades lo has resuelto\n\nIntenta superar el objetivo minimo de movimientos", "Felicitaciones", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (Exception e) {
        }
    }
    private void BtnA_CActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnA_CActionPerformed
        MoverDeA_C();
    }//GEN-LAST:event_BtnA_CActionPerformed

    private void MoverDeB_A() {
        try {
            if (PilaTorreB.getContNodo() > 0) {

                Nodo Plataforma = new Nodo();

                Plataforma.setDato(PilaTorreB.Peek());

                if (PilaTorreA.getContNodo() > 0) {

                    if (Plataforma.getDato().compareTo(PilaTorreA.Peek()) > 0) {

                        return;
                    }
                }

                PilaTorreB.POP();
                PilaTorreA.Push(Plataforma);

                PresentarTorreB();
                PresentarTorreA();
                PresentarCantMov();

            }
        } catch (Exception e) {
        }
    }
    private void BtnB_AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnB_AActionPerformed
        MoverDeB_A();
    }//GEN-LAST:event_BtnB_AActionPerformed

    private void MoverDeB_C() {
        try {
            if (PilaTorreB.getContNodo() > 0) {

                Nodo Plataforma = new Nodo();

                Plataforma.setDato(PilaTorreB.Peek());

                if (PilaTorreC.getContNodo() > 0) {

                    if (Plataforma.getDato().compareTo(PilaTorreC.Peek()) > 0) {

                        return;
                    }
                }

                PilaTorreB.POP();
                PilaTorreC.Push(Plataforma);

                PresentarTorreB();
                PresentarTorreC();
                PresentarCantMov();

                if (PilaTorreC.getContNodo() == Objetivo && ContNumMov == NumMinMov) {
                    JOptionPane.showMessageDialog(null, "Felicidades has echo el minimo de movimientos\n\nIntenta con otro nivel de dificultad", "Felicitaciones", JOptionPane.WARNING_MESSAGE);
                } else if (PilaTorreC.getContNodo() == Objetivo && ContNumMov != NumMinMov) {
                    JOptionPane.showMessageDialog(null, "Felicidades lo has resuelto\n\nIntenta superar el objetivo minimo de movimientos", "Felicitaciones", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (Exception e) {
        }
    }
    private void BtnB_CActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnB_CActionPerformed
        MoverDeB_C();
    }//GEN-LAST:event_BtnB_CActionPerformed

    private void MoverDeC_A() {
        try {
            if (PilaTorreC.getContNodo() > 0) {

                Nodo Plataforma = new Nodo();

                Plataforma.setDato(PilaTorreC.Peek());

                if (PilaTorreA.getContNodo() > 0) {

                    if (Plataforma.getDato().compareTo(PilaTorreA.Peek()) > 0) {

                        return;
                    }
                }

                PilaTorreC.POP();
                PilaTorreA.Push(Plataforma);

                PresentarTorreA();
                PresentarTorreC();
                PresentarCantMov();

            }
        } catch (Exception e) {
        }
    }
    private void BtnC_AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnC_AActionPerformed
        MoverDeC_A();
    }//GEN-LAST:event_BtnC_AActionPerformed

    private void MoverDeC_B() {
        try {
            if (PilaTorreC.getContNodo() > 0) {

                Nodo Plataforma = new Nodo();

                Plataforma.setDato(PilaTorreC.Peek());

                if (PilaTorreB.getContNodo() > 0) {

                    if (Plataforma.getDato().compareTo(PilaTorreB.Peek()) > 0) {

                        return;
                    }
                }

                PilaTorreC.POP();
                PilaTorreB.Push(Plataforma);

                PresentarTorreC();
                PresentarTorreB();
                PresentarCantMov();

                if (PilaTorreC.getContNodo() == Objetivo && ContNumMov == NumMinMov) {
                    JOptionPane.showMessageDialog(null, "Felicidades has echo el minimo de movimientos\n\nIntenta con otro nivel de dificultad", "Felicitaciones", JOptionPane.WARNING_MESSAGE);
                } else if (PilaTorreC.getContNodo() == Objetivo && ContNumMov != NumMinMov) {
                    JOptionPane.showMessageDialog(null, "Felicidades lo has resuelto\n\nIntenta superar el objetivo minimo de movimientos", "Felicitaciones", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (Exception e) {
        }
    }
    private void BtnC_BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnC_BActionPerformed
        MoverDeC_B();
    }//GEN-LAST:event_BtnC_BActionPerformed

    boolean stop = false;

    private void MoverPlataforma(Pila Origen, Pila Destino) {

        if (Stop == false) {

            Nodo Plataforma = new Nodo();

            Plataforma.setDato(Origen.Peek());

            Origen.POP();

            Destino.Push(Plataforma);

            PresentarTorreA();
            PresentarTorreB();
            PresentarTorreC();
            PresentarCantMov();

            JOptionPane pane = new JOptionPane("Paso # " + lblNumeroMovimientos.getText() + "\n\n¿Continuar?", JOptionPane.QUESTION_MESSAGE, JOptionPane.YES_NO_OPTION);

            JDialog dialog = pane.createDialog("Numero de pasos");

            dialog.setLocation(600, 400);

            dialog.setVisible(true);

            int opt = (int) pane.getValue();

            if (opt == JOptionPane.NO_OPTION) {
                Stop = true;
            }

        }

    }

    private void ResolverHanoiRecursivo(int n, Pila A, Pila B, Pila C) {

        if (n == 1) {

            MoverPlataforma(A, C);
        } else {
            ResolverHanoiRecursivo(n - 1, A, C, B);

            MoverPlataforma(A, C);

            ResolverHanoiRecursivo(n - 1, B, A, C);
        }
    }
    private void BtnResolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnResolverActionPerformed
        // TODO add your handling code here:
        if (!lblMinimoMovimientos.getText().equals("") && PilaTorreC.getContNodo() != Objetivo) {

            Reiniciar();
            Stop = false;

            ResolverHanoiRecursivo(Objetivo, PilaTorreA, PilaTorreB, PilaTorreC);
        }

    }//GEN-LAST:event_BtnResolverActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Torres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Torres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Torres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Torres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Torres().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnA_B;
    private javax.swing.JButton BtnA_C;
    private javax.swing.JButton BtnB_A;
    private javax.swing.JButton BtnB_C;
    private javax.swing.JButton BtnC_A;
    private javax.swing.JButton BtnC_B;
    private javax.swing.JButton BtnIniciar;
    private javax.swing.JButton BtnReiniciar;
    private javax.swing.JButton BtnResolver;
    private javax.swing.JComboBox<String> CbNumerosDiscos;
    private javax.swing.JTable TorreA;
    private javax.swing.JTable TorreB;
    private javax.swing.JTable TorreC;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblMinimoMovimientos;
    private javax.swing.JLabel lblNumeroMovimientos;
    // End of variables declaration//GEN-END:variables
}
